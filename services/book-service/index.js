const express = require('express');
const { PrismaClient } = require('@prisma/client');


const app = express();
const prisma = new PrismaClient();
const cors = require('cors');
app.use(cors());

app.use(express.json());

// üì¶ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
app.get('/items', async (req, res) => {
  try {
    const items = await prisma.item.findMany();
    res.json(items);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
  }
});

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (–∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)
app.post('/items', async (req, res) => {
  const {
    title,
    category,
    author,
    publisher,
    edition,
    manufacturer,
    price,
    quantity
  } = req.body;

  if (!title || !category || price == null || quantity == null) {
    return res.status(400).json({ error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
  }

  try {
    // –ù–∞–π–¥—ë–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–æ–ª—è–º
    const existing = await prisma.item.findFirst({
      where: {
        title,
        category,
        ...(category === '–ö–Ω–∏–≥–∞' && {
          author,
          publisher,
          edition,
        }),
        ...(category !== '–ö–Ω–∏–≥–∞' && {
          manufacturer,
        }),
      },
    });

    if (existing) {
      // –û–±–Ω–æ–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω
      const updated = await prisma.item.update({
        where: { id: existing.id },
        data: {
          quantity: existing.quantity + Number(quantity),
        },
      });
      return res.json(updated);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    const newItem = await prisma.item.create({
      data: {
        title,
        category,
        author,
        publisher,
        edition,
        manufacturer,
        price: parseFloat(price),
        quantity: parseInt(quantity),
      },
    });

    res.json(newItem);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
app.listen(3002, () => {
  console.log('üìö Book-—Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3002');
});


// üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
app.delete('/items/:id', async (req, res) => {
  const { id } = req.params;

  try {
    await prisma.item.delete({
      where: { id: Number(id) },
    });
    res.status(204).send(); // 204 No Content
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});
