const express = require('express');
const cors = require('cors');
require('dotenv').config();

const bcrypt = require('bcrypt'); // ‚Üê –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º bcrypt
const { PrismaClient } = require('@prisma/client'); // ‚Üê –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PrismaClient
const prisma = new PrismaClient(); // ‚Üê —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞

const authRoutes = require('./routes/auth');

const app = express();
app.use(cors());
app.use(express.json());

app.use('/', authRoutes); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`Auth-service –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});


app.post('/register', async (req, res) => {
    const { email, password, role } = req.body; // üü¢ email, –Ω–µ username
  
    if (!email || !password || !role) {
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
  
    try {
      const existing = await prisma.user.findUnique({ where: { email } });
  
      if (existing) {
        return res.status(409).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }
  
      const hashed = await bcrypt.hash(password, 10);
      await prisma.user.create({
        data: {
          email,
          password: hashed,
          role,
        }
      });
  
      res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
  });
  

  app.delete('/users/:email', async (req, res) => {
    const { email } = req.params;
  
    try {
      const user = await prisma.user.delete({
        where: { email },
      });
  
      res.status(204).send(); // –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
  });
  