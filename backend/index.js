const express = require('express');
const cors = require('cors');
const axios = require('axios');
const verifyToken = require('./authMiddleware');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

const BOOK_SERVICE_URL = process.env.BOOK_SERVICE_URL;

// –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–¥—É—Ç —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /api
const router = express.Router();

// üîí –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã (–∫–Ω–∏–≥–∏ –∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—é)
router.get('/items', verifyToken(), async (req, res) => {
  try {
    const response = await axios.get(`${BOOK_SERVICE_URL}/items`, {
      headers: { Authorization: req.headers.authorization }
    });
    res.json(response.data);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
  }
});

// üîí –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (–∫–Ω–∏–≥—É –∏–ª–∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—é)
router.post('/items', verifyToken(), async (req, res) => {
  try {
    const response = await axios.post(`${BOOK_SERVICE_URL}/items`, req.body, {
      headers: { Authorization: req.headers.authorization }
    });
    res.json(response.data);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});




router.post('/register', async (req, res) => {
  try {
    const response = await axios.post(`${process.env.AUTH_SERVICE_URL}/register`, req.body);
    res.json(response.data);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
});

router.post('/login', async (req, res) => {
  try {
    const response = await axios.post(`${process.env.AUTH_SERVICE_URL}/login`, req.body);
    res.json(response.data);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:', err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
router.delete('/items/:id', verifyToken(), async (req, res) => {
  try {
    const response = await axios.delete(`${BOOK_SERVICE_URL}/items/${req.params.id}`, {
      headers: { Authorization: req.headers.authorization }
    });
    res.status(204).send();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
router.delete('/users/:email', verifyToken(), async (req, res) => {
  try {
    const response = await axios.delete(`${process.env.AUTH_SERVICE_URL}/users/${req.params.email}`, {
      headers: { Authorization: req.headers.authorization }
    });
    res.status(204).send();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
});



// üß™ –ü–æ—Ä—Ç –∑–∞–ø—É—Å–∫–∞
app.listen(3000, () => {
  console.log('API Gateway —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:3000');
});


// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∫ /api
app.use('/api', router);